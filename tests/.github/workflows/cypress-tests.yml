name: Cypress E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Job 1: Setup and API Tests
  api-tests:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        containers: [1, 2] # Parallel execution
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: tests/package-lock.json
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start Application Services
      run: |
        docker-compose up -d --build
        echo "Waiting for services to start..."
        sleep 30
    
    - name: Verify Application Health
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
        timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        echo "✅ Application services are healthy"
    
    - name: Install Test Dependencies
      working-directory: tests
      run: |
        npm ci
        npx cypress verify
    
    - name: Run API Tests
      working-directory: tests
      run: |
        npm run test:api
      env:
        CYPRESS_baseUrl: http://localhost:3000
        CYPRESS_apiUrl: http://localhost:8080
    
    - name: Upload API Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: api-test-results-${{ matrix.containers }}
        path: |
          tests/cypress/screenshots/
          tests/cypress/videos/
          tests/cypress/reports/
        retention-days: 7

  # Job 2: Frontend E2E Tests
  frontend-tests:
    runs-on: ubuntu-latest
    needs: api-tests
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox, edge]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: tests/package-lock.json
    
    - name: Start Application Services
      run: |
        docker-compose up -d --build
        sleep 30
    
    - name: Verify Application Health
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
        timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
    
    - name: Install Test Dependencies
      working-directory: tests
      run: npm ci
    
    - name: Run Frontend Tests - ${{ matrix.browser }}
      working-directory: tests
      run: |
        npm run cy:run:${{ matrix.browser }} -- --spec "cypress/e2e/frontend/**/*.cy.js"
      env:
        CYPRESS_baseUrl: http://localhost:3000
        CYPRESS_apiUrl: http://localhost:8080
    
    - name: Upload Frontend Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: frontend-test-results-${{ matrix.browser }}
        path: |
          tests/cypress/screenshots/
          tests/cypress/videos/
          tests/cypress/reports/
        retention-days: 7

  # Job 3: Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [api-tests, frontend-tests]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: tests/package-lock.json
    
    - name: Start Application Services
      run: |
        docker-compose up -d --build
        sleep 30
    
    - name: Verify Application Health
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
        timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
    
    - name: Install Test Dependencies
      working-directory: tests
      run: npm ci
    
    - name: Run Integration Tests
      working-directory: tests
      run: |
        npm run test:integration
      env:
        CYPRESS_baseUrl: http://localhost:3000
        CYPRESS_apiUrl: http://localhost:8080
    
    - name: Upload Integration Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: |
          tests/cypress/screenshots/
          tests/cypress/videos/
          tests/cypress/reports/
        retention-days: 7

  # Job 4: Browserstack Tests (when enabled)
  browserstack-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[browserstack]')
    needs: [api-tests, frontend-tests, integration-tests]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: tests/package-lock.json
    
    - name: Install Dependencies
      working-directory: tests
      run: |
        npm ci
        npm install -g browserstack-cypress-cli
    
    - name: Setup Browserstack Configuration
      working-directory: tests
      run: |
        echo '{
          "auth": {
            "username": "${{ secrets.BROWSERSTACK_USERNAME }}",
            "access_key": "${{ secrets.BROWSERSTACK_ACCESS_KEY }}"
          },
          "browsers": [
            {"browser": "chrome", "os": "Windows 10", "versions": ["latest"]},
            {"browser": "firefox", "os": "Windows 10", "versions": ["latest"]},
            {"browser": "safari", "os": "OS X Monterey", "versions": ["latest"]}
          ],
          "run_settings": {
            "cypress_config_file": "cypress.config.js",
            "build_name": "CI Build #${{ github.run_number }}",
            "project_name": "Ecommerce Fullstack Tests"
          }
        }' > browserstack.json
    
    - name: Run Browserstack Tests
      working-directory: tests
      run: |
        browserstack-cypress run --sync
      env:
        BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
        BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

  # Job 5: Test Summary and Reporting
  test-summary:
    runs-on: ubuntu-latest
    if: always()
    needs: [api-tests, frontend-tests, integration-tests]
    
    steps:
    - name: Download All Test Artifacts
      uses: actions/download-artifact@v3
      with:
        path: test-results
    
    - name: Generate Test Summary
      run: |
        echo "# 🧪 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results Overview" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|---------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| API Tests | ${{ needs.api-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | Core API functionality validation |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | UI/UX and E2E workflows |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | Cross-system validation |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Test Cases**: 25 (20 primary + 5 integration)" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Assertions**: 125+" >> $GITHUB_STEP_SUMMARY
        echo "- **API Coverage**: 15 test cases, 82 assertions" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Coverage**: 5 test cases, 29 assertions" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Coverage**: 5 test cases, 14 assertions" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number**: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload Combined Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: all-test-results
        path: test-results/
        retention-days: 30

  # Job 6: Cleanup
  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [api-tests, frontend-tests, integration-tests, test-summary]
    
    steps:
    - name: Cleanup Docker Resources
      run: |
        docker-compose down -v --remove-orphans || true
        docker system prune -f || true
